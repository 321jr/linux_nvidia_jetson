/*
 * Copyright (c) 2015-2018, NVIDIA CORPORATION.  All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <dt-bindings/media/camera.h>
#include <dt-bindings/platform/t210/t210.h>

#define CAMERA_I2C_MUX_BUS(x) (0x1E + x)

/ {
	host1x {
		vi {
			status = "okay";
			num-channels = <2>;
			ports {
				status = "okay";
				#address-cells = <1>;
				#size-cells = <0>;
				port@0 {
					status ="okay";
					reg = <0>;
					avt_csi2_vi_in0: endpoint {
						status = "okay";
						port-index = <0>;
						bus-width = <2>;
						remote-endpoint = <&avt_csi2_csi_out0>;
					};
				};
				port@1 {
					reg = <1>;
					avt_csi2_vi_in1: endpoint {
						port-index = <2>;
						bus-width = <2>;
						remote-endpoint = <&avt_csi2_csi_out1>;
					};
				};
			};
		};

		nvcsi {
			status = "okay";
			num-channels = <2>;
			#address-cells = <1>;
			#size-cells = <0>;
			channel@0 {
				status = "okay";
				reg = <0>;
				ports {
					status = "okay";
					#address-cells = <1>;
					#size-cells = <0>;
					port@0 {
						status = "okay";
						reg = <0>;
						avt_csi2_csi_in0: endpoint@0 {
							port-index = <0>;
							bus-width = <2>;
							remote-endpoint = <&avt_csi2_out0>;
						};
					};
					port@1 {
						status = "okay";
						reg = <1>;
						avt_csi2_csi_out0: endpoint@1 {
							remote-endpoint = <&avt_csi2_vi_in0>;
						};
					};
				};
			};
			channel@1 {
				status = "okay";
				reg = <1>;
				ports {
					#address-cells = <1>;
					#size-cells = <0>;
					port@0 {
						status = "okay";
						reg = <0>;
						avt_csi2_csi_in1: endpoint@2 {
							port-index = <2>;
							bus-width = <2>;
							remote-endpoint = <&avt_csi2_out1>;
						};
					};
					port@1 {
						status = "okay";
						reg = <1>;
						avt_csi2_csi_out1: endpoint@3 {
							remote-endpoint = <&avt_csi2_vi_in1>;
						};
					};
				};
			};
		};

		i2c@546c0000 {
			avt_csi2_a@3c {
				status = "okay";
				mclk = "extperiph1";

				devnode = "video0";
				compatible = "alliedvision,avt_csi2";
				reg = <0x3c>;

				ports {
					#address-cells = <1>;
					#size-cells = <0>;

					port@0 {
						reg = <0>;
						avt_csi2_out0: endpoint {
							port-index = <0>;
							bus-width = <2>;
							remote-endpoint = <&avt_csi2_csi_in0>;
						};
					};
				};

				mode0 {
					num_lanes = "4";
					tegra_sinterface = "serial_a";
					discontinuous_clk = "no";
					cil_settletime = "0";
					embedded_metadata_height = "0";

					/* not verified: */
					mclk_khz = "24000";
					phy_mode = "DPHY";
					dpcm_enable = "false";

					active_w = "5488";
					active_h = "4112";
					pixel_t = "bayer_bggr";
					readout_orientation = "0";
					line_length = "5488";
					inherent_gain = "1";
					mclk_multiplier = "31.25";
					pix_clk_hz = "750000000";

					gain_factor = "16";
					framerate_factor = "1000000";
					exposure_factor = "1000000";
					min_gain_val = "16"; /* 1.0 */
					max_gain_val = "256"; /* 16.0 */
					step_gain_val = "1"; /* 0.125 */
					min_hdr_ratio = "1";
					max_hdr_ratio = "64";
					min_framerate = "1500000"; /* 1.5 */
					max_framerate = "30000000"; /* 30 */
					step_framerate = "1";
					min_exp_time = "34"; /* us */
					max_exp_time = "550385"; /* us */
					step_exp_time = "1";
				};
			};
		};
	};


	i2c@7000c000 {
		avt_csi2_b@3c {
			status = "okay";
			mclk = "extperiph1";

			devnode = "video1";
			compatible = "alliedvision,avt_csi2";
			reg = <0x3c>;

			ports {
				#address-cells = <1>;
				#size-cells = <0>;

				port@0 {
					reg = <0>;
					avt_csi2_out1: endpoint {
						port-index = <0>;
						bus-width = <2>;
						remote-endpoint = <&avt_csi2_csi_in1>;
					};
				};
			};

			mode0 {
				num_lanes = "4";
				tegra_sinterface = "serial_a";
				discontinuous_clk = "no";
				cil_settletime = "0";
				embedded_metadata_height = "0";

				/* not verified: */
				mclk_khz = "24000";
				phy_mode = "DPHY";
				dpcm_enable = "false";

				active_w = "5488";
				active_h = "4112";
				pixel_t = "bayer_bggr";
				readout_orientation = "0";
				line_length = "5488";
				inherent_gain = "1";
				mclk_multiplier = "31.25";
				pix_clk_hz = "750000000";

				gain_factor = "16";
				framerate_factor = "1000000";
				exposure_factor = "1000000";
				min_gain_val = "16"; /* 1.0 */
				max_gain_val = "256"; /* 16.0 */
				step_gain_val = "1"; /* 0.125 */
				min_hdr_ratio = "1";
				max_hdr_ratio = "64";
				min_framerate = "1500000"; /* 1.5 */
				max_framerate = "30000000"; /* 30 */
				step_framerate = "1";
				min_exp_time = "34"; /* us */
				max_exp_time = "550385"; /* us */
				step_exp_time = "1";
			};
		};
	};


	tegra-camera-platform {
		compatible = "nvidia, tegra-camera-platform";
		status = "okay";
		/**
		* Physical settings to calculate max ISO BW
		*
		* num_csi_lanes = <>;
		* Total number of CSI lanes when all cameras are active
		*
		* max_lane_speed = <>;
		* Max lane speed in Kbit/s
		*
		* min_bits_per_pixel = <>;
		* Min bits per pixel
		*
		* vi_peak_byte_per_pixel = <>;
		* Max byte per pixel for the VI ISO case
		*
		* vi_bw_margin_pct = <>;
		* Vi bandwidth margin in percentage
		*
		* max_pixel_rate = <>;
		* Max pixel rate in Kpixel/s for the ISP ISO case
		*
		* isp_peak_byte_per_pixel = <>;
		* Max byte per pixel for the ISP ISO case
		*
		* isp_bw_margin_pct = <>;
		* Isp bandwidth margin in percentage
		*/
		num_csi_lanes = <8>;
		max_lane_speed = <1500000>;
		min_bits_per_pixel = <8>;
		vi_peak_byte_per_pixel = <2>;
		vi_bw_margin_pct = <25>;
		max_pixel_rate = <160000>;
		isp_peak_byte_per_pixel = <5>;
		isp_bw_margin_pct = <25>;

		/**
		* The general guideline for naming badge_info contains 3 parts, and is as follows,
		* The first part is the camera_board_id for the module; if the module is in a FFD
		* platform, then use the platform name for this part.
		* The second part contains the position of the module, ex. “rear” or “front”.
		* The third part contains the last 6 characters of a part number which is found
		* in the module's specsheet from the vender.
		*/
		modules {
			status = "okay";
			module0 {
				status = "okay";
				badge = "avt_csi2_a";
				position = "front";
				orientation = "1";
				drivernode0 {
					status = "okay";
					/* Declare PCL support driver (classically known as guid)  */
					pcl_id = "v4l2_sensor";
					/* Driver v4l2 device name */
					devname = "avt_csi2_a 32-003c";
					/* Declare the device-tree hierarchy to driver instance */
					proc-device-tree =
						"/proc/device-tree/host1x/i2c@546c0000/avt_csi2_a@3c";
				};
			};
			module1 {
				status = "okay";
				badge = "avt_csi2_b";
				position = "front";
				orientation = "1";
				drivernode0 {
					status = "okay";
					/* Declare PCL support driver (classically known as guid)  */
					pcl_id = "v4l2_sensor";
					/* Driver v4l2 device name */
					devname = "avt_csi2_b 32-003c";
					/* Declare the device-tree hierarchy to driver instance */
					proc-device-tree =
						"/proc/device-tree/i2c@7000c000/avt_csi2_b@3c";
				};
			};
		};
	};
};
